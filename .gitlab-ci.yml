# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
  - test
  - secret-detection
  - build
  - scan
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  SECRET_DETECTION_ENABLED: 'true'
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE
  DOCKER_HUB_IMAGE: $DOCKER_HUB_USERNAME/blendscan

# Security scanning
sast:
  stage: test

secret_detection:
  stage: secret-detection

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml

# Docker build stage
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    # Build for GitLab Container Registry
    - docker build --tag $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA .
    - docker build --tag $DOCKER_IMAGE_NAME:latest .

    # Build for Docker Hub
    - docker build --tag $DOCKER_HUB_IMAGE:$CI_COMMIT_SHA .
    - docker build --tag $DOCKER_HUB_IMAGE:latest .

    # Tag version if on main branch
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        VERSION=$(grep -o '"version": ([0-9, ]*' __init__.py | grep -o '[0-9, ]*' | tr -d ' ' | tr ',' '.')
        docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_IMAGE_NAME:v$VERSION
        docker tag $DOCKER_HUB_IMAGE:latest $DOCKER_HUB_IMAGE:v$VERSION
      fi

    # Push to registries
    - docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $DOCKER_IMAGE_NAME:latest
    - docker push $DOCKER_HUB_IMAGE:$CI_COMMIT_SHA
    - docker push $DOCKER_HUB_IMAGE:latest

    # Push version tag if on main branch
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        VERSION=$(grep -o '"version": ([0-9, ]*' __init__.py | grep -o '[0-9, ]*' | tr -d ' ' | tr ',' '.')
        docker push $DOCKER_IMAGE_NAME:v$VERSION
        docker push $DOCKER_HUB_IMAGE:v$VERSION
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

# Container scanning
container_scanning:
  stage: scan
  variables:
    CI_APPLICATION_REPOSITORY: $DOCKER_IMAGE_NAME
    CI_APPLICATION_TAG: $CI_COMMIT_SHA
  dependencies:
    - build

# Deploy to Docker Hub (for releases)
deploy:docker-hub:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    - echo "Deploying BlendScan v$CI_COMMIT_TAG to Docker Hub"
    - docker pull $DOCKER_HUB_IMAGE:latest
    - docker tag $DOCKER_HUB_IMAGE:latest $DOCKER_HUB_IMAGE:$CI_COMMIT_TAG
    - docker push $DOCKER_HUB_IMAGE:$CI_COMMIT_TAG
    - docker push $DOCKER_HUB_IMAGE:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  environment:
    name: docker-hub
    url: https://hub.docker.com/r/$DOCKER_HUB_USERNAME/blendscan

# Test Docker image
test:docker:
  stage: test
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_BUILDKIT: 1
  script:
    - echo "Building test image..."
    - docker build -t blendscan-test .

    - echo "Testing Blender version (with software rendering fallback)..."
    - docker run --rm --env LIBGL_ALWAYS_SOFTWARE=1 blendscan-test blender --version || echo "Direct version check failed, trying alternative..."

    - echo "Testing Blender basic functionality..."
    - docker run --rm --env LIBGL_ALWAYS_SOFTWARE=1 blendscan-test blender --background --factory-startup --python-expr "import bpy; print('✓ Blender loaded successfully')" || {
        echo "ERROR: Blender cannot run in CI environment";
        echo "Checking library dependencies...";
        docker run --rm blendscan-test ldd /opt/blender/blender | head -20;
        exit 1;
      }

    - echo "Testing BlendScan addon loading..."
    - docker run --rm --env LIBGL_ALWAYS_SOFTWARE=1 blendscan-test blender --background --factory-startup --python-expr "
        import bpy;
        import sys;
        sys.path.append('/home/blender/.config/blender/4.4/scripts/addons');
        bpy.utils.enable_addon('blendscan');
        from blendscan.analyzer import BlenderSecurityAnalyzer;
        analyzer = BlenderSecurityAnalyzer();
        print(f'✓ BlendScan loaded with {len(analyzer.security_rules)} security rules')
      "

    - echo "Testing security detection..."
    - docker run --rm --env LIBGL_ALWAYS_SOFTWARE=1 blendscan-test blender --background --factory-startup --python-expr "
        import bpy;
        import sys;
        sys.path.append('/home/blender/.config/blender/4.4/scripts/addons');
        bpy.utils.enable_addon('blendscan');
        from blendscan.analyzer import BlenderSecurityAnalyzer;
        analyzer = BlenderSecurityAnalyzer();
        result = analyzer.analyze_script('import os; os.system(\"test\")', 'test.py');
        assert result['risk_level'] == 'CRITICAL', f'Expected CRITICAL, got {result[\"risk_level\"]}';
        print('✓ Security detection working correctly')
      "
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG
