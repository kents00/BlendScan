# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
  - test
  - secret-detection
  - build
  - scan
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  SECRET_DETECTION_ENABLED: 'true'
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE
  DOCKER_HUB_IMAGE: $DOCKER_HUB_USERNAME/blendscan

# Security scanning
sast:
  stage: test

secret_detection:
  stage: secret-detection

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml

# Docker build stage
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      if [ -n "$DOCKER_HUB_USERNAME" ] && [ -n "$DOCKER_HUB_PASSWORD" ]; then
        echo "Docker Hub credentials found, logging in..."
        echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
        export DOCKER_HUB_ENABLED=true
      else
        echo "Docker Hub credentials not found, skipping Docker Hub operations"
        export DOCKER_HUB_ENABLED=false
      fi
  script:
    # Build once and tag multiple times to save time
    - echo "Building Docker image..."
    - docker build --tag blendscan-temp .

    # Tag for GitLab Container Registry
    - docker tag blendscan-temp $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
    - docker tag blendscan-temp $DOCKER_IMAGE_NAME:latest

    # Tag for Docker Hub (conditional)
    - |
      if [ "$DOCKER_HUB_ENABLED" = "true" ]; then
        echo "Tagging images for Docker Hub..."
        docker tag blendscan-temp $DOCKER_HUB_IMAGE:$CI_COMMIT_SHA
        docker tag blendscan-temp $DOCKER_HUB_IMAGE:latest
      fi

    # Extract and tag version if on main branch
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        echo "Extracting version from project files..."
        VERSION=""

        # Try multiple patterns to find version
        if [ -f "__init__.py" ]; then
          echo "Checking __init__.py for Blender addon version..."
          # Handle Blender addon version format: "version": (1, 0, 0)
          VERSION_TUPLE=$(grep -A 1 '"version"' __init__.py | grep -oE '\([0-9]+,\s*[0-9]+,\s*[0-9]+\)' | head -1)
          if [ -n "$VERSION_TUPLE" ]; then
            echo "Found version tuple: $VERSION_TUPLE"
            # Extract numbers and convert to dotted format
            VERSION=$(echo "$VERSION_TUPLE" | sed 's/[(),[:space:]]//g' | tr ',' '.')
            echo "Converted to: $VERSION"
          fi

          # Fallback to standard version patterns if tuple format failed
          if [ -z "$VERSION" ]; then
            echo "Trying standard version patterns..."
            VERSION=$(grep -E '(version|__version__)' __init__.py | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          fi
        elif [ -f "setup.py" ]; then
          VERSION=$(grep -E 'version=' setup.py | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        elif [ -f "pyproject.toml" ]; then
          VERSION=$(grep -E 'version =' pyproject.toml | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        fi

        # Validate version format (must be X.Y.Z)
        if [ -n "$VERSION" ]; then
          if echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Valid version found: $VERSION"
            echo "Tagging with version: v$VERSION"
            docker tag blendscan-temp $DOCKER_IMAGE_NAME:v$VERSION
            if [ "$DOCKER_HUB_ENABLED" = "true" ]; then
              docker tag blendscan-temp $DOCKER_HUB_IMAGE:v$VERSION
            fi
            export VERSION_TAG="v$VERSION"
          else
            echo "Invalid version format: $VERSION (expected X.Y.Z)"
            echo "Skipping version tagging"
            export VERSION_TAG=""
          fi
        else
          echo "No version found in project files"
          export VERSION_TAG=""
        fi
      else
        echo "Not on main branch, skipping version extraction"
        export VERSION_TAG=""
      fi

    # Push to registries
    - docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $DOCKER_IMAGE_NAME:latest
    - |
      if [ "$DOCKER_HUB_ENABLED" = "true" ]; then
        echo "Pushing to Docker Hub..."
        docker push $DOCKER_HUB_IMAGE:$CI_COMMIT_SHA
        docker push $DOCKER_HUB_IMAGE:latest
      fi

    # Push version tag if it exists
    - |
      if [ -n "$VERSION_TAG" ]; then
        echo "Pushing version tag: $VERSION_TAG"
        docker push $DOCKER_IMAGE_NAME:$VERSION_TAG
        if [ "$DOCKER_HUB_ENABLED" = "true" ]; then
          docker push $DOCKER_HUB_IMAGE:$VERSION_TAG
        fi
      fi

    # Clean up temporary image
    - docker rmi blendscan-temp || true
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

# Container scanning
container_scanning:
  stage: scan
  variables:
    CI_APPLICATION_REPOSITORY: $DOCKER_IMAGE_NAME
    CI_APPLICATION_TAG: $CI_COMMIT_SHA
  dependencies:
    - build